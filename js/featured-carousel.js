// Generated by CoffeeScript 1.3.3
(function() {
  var FeaturedCarousel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FeaturedCarousel = (function() {

    function FeaturedCarousel(element, options) {
      this.loadContent = __bind(this.loadContent, this);

      this.listClickHandler = __bind(this.listClickHandler, this);
      this.element = $(element);
      this.settings = $.extend({}, $.fn.featuredcarousel.defaults, options, this.element.data());
      $(this.settings.linkListSelector).on('click', this.settings.linkListDelegatedSelector, this.listClickHandler);
    }

    FeaturedCarousel.prototype.listClickHandler = function(event) {
      event.preventDefault();
      this.selectedListItem = $(event.currentTarget);
      this.element.trigger('click.itemselected.featuredcarousel');
      return this.loadContent(this.selectedListItem.attr('href'));
    };

    FeaturedCarousel.prototype.loadContent = function(url) {
      var _this = this;
      return $.ajax({
        url: url,
        type: 'GET',
        dataType: 'html',
        cache: false,
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log('error loading item');
        },
        success: function(data, textStatus, jqXHR) {
          var existingItem, item;
          item = $(data);
          existingItem = $("#" + (item.attr('id')));
          _this.element.find("." + _this.settings.activeClass).removeClass(_this.settings.activeClass);
          if (existingItem.length === 0) {
            item.removeClass(_this.settings.activeClass).appendTo(_this.element);
            item[0].offsetWidth;
            existingItem = item;
          }
          existingItem.addClass(_this.settings.activeClass);
          return _this.element.trigger('itemloaded.featuredcarousel');
        }
      });
    };

    return FeaturedCarousel;

  })();

  $.fn.featuredcarousel = function(options) {
    return this.each(function() {
      var $el, data;
      $el = $(this);
      data = $el.data('featuredcarousel');
      if (!data) {
        return $el.data('featuredcarousel', (data = new FeaturedCarousel(this, options)));
      }
    });
  };

  $.fn.featuredcarousel.Constructor = FeaturedCarousel;

  $.fn.featuredcarousel.defaults = {
    containerSelector: '.featured-carousel',
    linkListSelector: '.featured-carousel-selection-list',
    linkListDelegatedSelector: 'a',
    activeClass: 'active'
  };

}).call(this);
